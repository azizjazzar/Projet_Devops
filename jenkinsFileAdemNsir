pipeline {
    agent any

    environment {
        NEXUS_URL = 'http://192.168.152.128:8081/repository/5SIM1-G2-SKISTATION'
        ARTIFACT_PATH = 'tn/esprit/spring/gestion-station-ski/1.0/gestion-station-ski-1.0.jar'
        DOCKER_IMAGE_NAME = 'adem012/gestion-station-ski'
        SONARQUBE_ENV = 'sq_env'
    }

    stages {
        stage('GitHub Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn -Dtest=CourseServicesImplTest test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'NEXUS_CREDENTIALS_ID', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    sh """
                        mvn clean deploy -DskipTests \
                            -DaltDeploymentRepository=nexus-repo::default::${NEXUS_URL}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'NEXUS_CREDENTIALS_ID', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                        docker.build("${DOCKER_IMAGE_NAME}:1.0", "-f /home/vagrant/projet-ski/Dockerfile --build-arg NEXUS_URL=${NEXUS_URL} \
                            --build-arg NEXUS_USERNAME=${NEXUS_USERNAME} \
                            --build-arg NEXUS_PASSWORD=${NEXUS_PASSWORD} \
                            --build-arg ARTIFACT_PATH=${ARTIFACT_PATH} .")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        docker.image("${DOCKER_IMAGE_NAME}:1.0").push()
                    }
                }
            }
        }


        stage('Grafana Setup') {
            steps {
                echo 'Starting Grafana...'
                sh 'docker-compose -f /home/vagrant/projet-ski/docker-compose.yml up -d grafana'
            }
        }
    }

    post {
        always {
            echo 'Pipeline terminé.'
            // Cleanup the Docker Compose containers
            sh 'docker-compose -f /home/vagrant/projet-ski/docker-compose.yml down'
        }
        success {
            echo 'Pipeline réussi.'
        }
        failure {
            echo 'Pipeline échoué.'
        }
    }
}
